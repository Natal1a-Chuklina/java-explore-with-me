{
  "info": {
    "_postman_id": "6b32c820-419e-4560-80fb-2cc450c6beb2",
    "name": "Feature_Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "22239561"
  },
  "item": [
    {
      "name": "Add_Friend",
      "item": [
        {
          "name": "Добавление самого себя в друзья",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 400 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(400)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление несуществующего пользователя в друзья",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "const friendId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление несуществующим пользователем друга",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "const friendId = users.params.firstId\r",
                  "\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление в друзья пользователя, которому уже был отправлен запрос на дружбу",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 409 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(409)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление в друзья пользователя, которому уже был отправлен запрос на дружбу",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 409 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(409)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление в друзья пользователя, которому уже был отправлен запрос на дружбу",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.cancelFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 409 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(409)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление в друзья пользователя, когда в базе нет записей с этими id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 201\", function () {\r",
                  "    pm.response.to.have.status(201)\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление в друзья пользователя, когда в базе есть запрос на дружбу от пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 201\", function () {\r",
                  "    pm.response.to.have.status(201)\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление в друзья пользователя, когда в базе есть отклоненный запрос на дружбу от пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "    await api.cancelFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 201\", function () {\r",
                  "    pm.response.to.have.status(201)\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Delete_Friend",
      "item": [
        {
          "name": "Удаление самого себя из друзей",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 400 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(400)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление несуществующего пользователя из друзей",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "const friendId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление несуществующим пользователем друга",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "const friendId = users.params.firstId\r",
                  "\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление пользователя из друзей, когда в базе нет записей с такими id пользователей",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление пользователя из друзей, когда в базе есть записи с такими id пользователей, но пользователь c userId не является другом или подписчиком пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление пользователя из друзей, когда в базе есть записи с такими id пользователей, но пользователь c userId не является другом или подписчиком пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "    await api.cancelFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление пользователя из друзей, когда пользователи друзья",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 204\", function () {\r",
                  "    pm.response.to.have.status(204)\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление пользователя из друзей, когда пользователь с userId подписчик пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.cancelFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 204\", function () {\r",
                  "    pm.response.to.have.status(204)\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление пользователя из друзей, когда пользователь с userId подписчик пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 204\", function () {\r",
                  "    pm.response.to.have.status(204)\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cancel_Friend",
      "item": [
        {
          "name": "Отклонение запроса на дружбу от самого себя",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 400 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(400)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу несуществующего пользователя",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "const friendId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу несуществующим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "const friendId = users.params.firstId\r",
                  "\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу, когда в базе нет записей с такими id пользователей",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу, когда пользователи друзья",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу, когда пользователь с userId подписчик пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу, когда пользователь с userId подписчик пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.cancelFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу, когда пользователь уже отклонил запрос на дружбу",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "    await api.cancelFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Отклонение запроса на дружбу, когда запрос существует",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/cancel",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "cancel"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Delete_Follower",
      "item": [
        {
          "name": "Удаление самого себя из подписчиков",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 400 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(400)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление несуществующего пользователя из подписчиков",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "const followerId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление несуществующим пользователем подписчика",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "const followerId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление из подписчиков, когда в базе нет записей с такими ids пользователей",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление из подписчиков друга",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(followerId, userId)\r",
                  "    await api.addFriend(userId, followerId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const followerId = pm.collectionVariables.get('followerId')\r",
                  "    await api.deleteFriend(userId, followerId)\r",
                  "    await api.deleteFriend(followerId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление из подписчиков не подписчика",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, followerId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const followerId = pm.collectionVariables.get('followerId')\r",
                  "    await api.deleteFriend(userId, followerId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление из подписчиков не подписчика",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, followerId)\r",
                  "    await api.cancelFriend(followerId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const followerId = pm.collectionVariables.get('followerId')\r",
                  "    await api.deleteFriend(userId, followerId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление из подписчиков подписчика, запрос на дружбу которого еще не отклонен",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(followerId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 409 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(409)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const followerId = pm.collectionVariables.get('followerId')\r",
                  "    await api.deleteFriend(followerId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление из подписчиков",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('followerId', followerId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(followerId, userId)\r",
                  "    await api.cancelFriend(userId, followerId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 204\", function () {\r",
                  "    pm.response.to.have.status(204)\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers/:followerId",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers",
                ":followerId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "followerId",
                  "value": "{{followerId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get_Relations",
      "item": [
        {
          "name": "Получение запросов на дружбу несуществующим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/requests",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "requests"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение запросов на дружбу когда в бд нет записей с этим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Должно быть не найдено ни одного пользователя\", function () {\r",
                  "    pm.expect(target.length).to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/requests",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "requests"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение запросов на дружбу когда у пользователя есть друзья, подписки и подписчики",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId1, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId2, userId)\r",
                  "    await api.cancelFriend(userId, followerId2)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "    await api.cancelFriend(followingId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id')\r",
                  "    pm.expect(target[0]).to.have.property('name')\r",
                  "    pm.expect(target[0]).to.have.property('email')\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должен быть найден только один запрос на подписку\", function () {\r",
                  "    pm.expect(target.length).to.eql(1)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать ожидаемому пользователю\", function () { \r",
                  "    pm.expect(target[0]).deep.equal(users[followerId1])\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "\r",
                  "    await api.deleteFriend(followerId1, userId)\r",
                  "    await api.deleteFriend(followerId2, userId)\r",
                  "\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/requests",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "requests"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение друзей несуществующим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение друзей когда в бд нет записей с этим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Должно быть не найдено ни одного пользователя\", function () {\r",
                  "    pm.expect(target.length).to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение друзей когда у пользователя есть друзья, подписки и подписчики",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId1, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId2, userId)\r",
                  "    await api.cancelFriend(userId, followerId2)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "    await api.cancelFriend(followingId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id')\r",
                  "    pm.expect(target[0]).to.have.property('name')\r",
                  "    pm.expect(target[0]).to.have.property('email')\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должен быть найден только один друг\", function () {\r",
                  "    pm.expect(target.length).to.eql(1)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать ожидаемому пользователю\", function () {\r",
                  "    pm.expect(target[0]).deep.equal(users[friendId])\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "\r",
                  "    await api.deleteFriend(followerId1, userId)\r",
                  "    await api.deleteFriend(followerId2, userId)\r",
                  "\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подписчиков несуществующим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers?type=FOLLOWED",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "FOLLOWED"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подписчиков пользователя  когда в бд нет записей с этим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Должно быть не найдено ни одного пользователя\", function () {\r",
                  "    pm.expect(target.length).to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers?type=FOLLOWED",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "FOLLOWED"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подписчиков когда у пользователя есть друзья, подписки и подписчики",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId1, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId2, userId)\r",
                  "    await api.cancelFriend(userId, followerId2)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "    await api.cancelFriend(followingId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id')\r",
                  "    pm.expect(target[0]).to.have.property('name')\r",
                  "    pm.expect(target[0]).to.have.property('email')\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должено быть найдено два подписчика\", function () {\r",
                  "    pm.expect(target.length).to.eql(2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должен быть подписчик 1\", ()=> {\r",
                  "    const u1 = target.find(u => u.id == followerId1)\r",
                  "    pm.expect(u1).deep.equal(users[followerId1])\r",
                  "})\r",
                  "\r",
                  "pm.test(\"В ответе должен быть подписчик 2\", ()=> {\r",
                  "    const u2 = target.find(u => u.id == followerId2)\r",
                  "    pm.expect(u2).deep.equal(users[followerId2])\r",
                  "})\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "\r",
                  "    await api.deleteFriend(followerId1, userId)\r",
                  "    await api.deleteFriend(followerId2, userId)\r",
                  "\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers?type=FOLLOWED",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "FOLLOWED"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подписок несуществующего пользователя",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId + 1\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers?type=FOLLOWING",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "FOLLOWING"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подписок пользователя  когда в бд нет записей с этим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Должно быть не найдено ни одного пользователя\", function () {\r",
                  "    pm.expect(target.length).to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers?type=FOLLOWING",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "FOLLOWING"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подписок когда у пользователя есть друзья, подписки и подписчики",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId1, userId)\r",
                  "\r",
                  "    await api.addFriend(followerId2, userId)\r",
                  "    await api.cancelFriend(userId, followerId2)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "    await api.cancelFriend(followingId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followerId1 = ids[2]\r",
                  "const followerId2 = ids[3]\r",
                  "const followingId1 = ids[4]\r",
                  "const followingId2 = ids[5]\r",
                  "\r",
                  "pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id')\r",
                  "    pm.expect(target[0]).to.have.property('name')\r",
                  "    pm.expect(target[0]).to.have.property('email')\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должено быть найдено двe подписки\", function () {\r",
                  "    pm.expect(target.length).to.eql(2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должна быть подписка 1\", ()=> {\r",
                  "    const u1 = target.find(u => u.id == followingId1)\r",
                  "    pm.expect(u1).deep.equal(users[followingId1])\r",
                  "})\r",
                  "\r",
                  "pm.test(\"В ответе должна быть подписка 2\", ()=> {\r",
                  "    const u2 = target.find(u => u.id == followingId2)\r",
                  "    pm.expect(u2).deep.equal(users[followingId2])\r",
                  "})\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "\r",
                  "    await api.deleteFriend(followerId1, userId)\r",
                  "    await api.deleteFriend(followerId2, userId)\r",
                  "\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/followers?type=FOLLOWING",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "followers"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "FOLLOWING"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get_Friend_Events",
      "item": [
        {
          "name": "Получение событий когда пользователь с friendId не является другом или подпиской пользователя с userId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const userId = users.params.lastId\r",
                  "const friendId = users.params.firstId\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий когда пользователь с friendId не является другом или подпиской пользователя с userId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий когда пользователь с friendId не является другом или подпиской пользователя с userId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "    await api.cancelFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение только доступных событий, когда пользователь с userId является подписчиком пользователя с friendId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const api = new API(pm)\r",
                  "const userIds = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = userIds[0]\r",
                  "const friendId = userIds[1]\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventNotVisible = eventIds[0]\r",
                  "const eventVisibleForFriends = eventIds[1]\r",
                  "const eventVisibleForFollowers = eventIds[2]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "\r",
                  "    await api.publishParticipationRequest(eventNotVisible, friendId, 'NONE')\r",
                  "    await api.publishParticipationRequest(eventVisibleForFriends, friendId, 'FRIENDS')\r",
                  "    await api.publishParticipationRequest(eventVisibleForFollowers, friendId, 'FOLLOWERS')\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventVisibleForFollowers = events[eventIds[2]]\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('title');\r",
                  "    pm.expect(target[0]).to.have.property('annotation');\r",
                  "    pm.expect(target[0]).to.have.property('category');\r",
                  "    pm.expect(target[0]).to.have.property('paid');\r",
                  "    pm.expect(target[0]).to.have.property('eventDate');\r",
                  "    pm.expect(target[0]).to.have.property('initiator');\r",
                  "    pm.expect(target[0]).to.have.property('views');\r",
                  "    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должно быть найдено только одно событие\", function () {\r",
                  "    pm.expect(target.length).to.eql(1)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать только видимому событию\", function () {\r",
                  "    pm.expect(target[0].id).equal(eventVisibleForFollowers.id);\r",
                  "    pm.expect(target[0].annotation).equal(eventVisibleForFollowers.annotation);\r",
                  "    pm.expect(target[0].category.id).equal(eventVisibleForFollowers.category.id);\r",
                  "    pm.expect(target[0].paid.toString()).equal(eventVisibleForFollowers.paid.toString());\r",
                  "    pm.expect(target[0].eventDate).equal(eventVisibleForFollowers.eventDate);\r",
                  "    pm.expect(target[0].title).equal(eventVisibleForFollowers.title);\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение только доступных событий, когда пользователь с userId является подписчиком пользователя с friendId Copy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const api = new API(pm)\r",
                  "const userIds = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = userIds[0]\r",
                  "const friendId = userIds[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.cancelFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventVisibleForFollowers = events[eventIds[2]]\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('title');\r",
                  "    pm.expect(target[0]).to.have.property('annotation');\r",
                  "    pm.expect(target[0]).to.have.property('category');\r",
                  "    pm.expect(target[0]).to.have.property('paid');\r",
                  "    pm.expect(target[0]).to.have.property('eventDate');\r",
                  "    pm.expect(target[0]).to.have.property('initiator');\r",
                  "    pm.expect(target[0]).to.have.property('views');\r",
                  "    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должно быть найдено только одно событие\", function () {\r",
                  "    pm.expect(target.length).to.eql(1)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать только видимому событию\", function () {\r",
                  "    pm.expect(target[0].id).equal(eventVisibleForFollowers.id);\r",
                  "    pm.expect(target[0].annotation).equal(eventVisibleForFollowers.annotation);\r",
                  "    pm.expect(target[0].category.id).equal(eventVisibleForFollowers.category.id);\r",
                  "    pm.expect(target[0].paid.toString()).equal(eventVisibleForFollowers.paid.toString());\r",
                  "    pm.expect(target[0].eventDate).equal(eventVisibleForFollowers.eventDate);\r",
                  "    pm.expect(target[0].title).equal(eventVisibleForFollowers.title);\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение только доступных событий, когда пользователь с userId является подписчиком пользователя с friendId Copy 2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const api = new API(pm)\r",
                  "const userIds = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = userIds[0]\r",
                  "const friendId = userIds[1]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "pm.collectionVariables.set('friendId', friendId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventVisibleForFollowers = events[eventIds[2]]\r",
                  "const eventVisibleForFriends = events[eventIds[1]]\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('title');\r",
                  "    pm.expect(target[0]).to.have.property('annotation');\r",
                  "    pm.expect(target[0]).to.have.property('category');\r",
                  "    pm.expect(target[0]).to.have.property('paid');\r",
                  "    pm.expect(target[0]).to.have.property('eventDate');\r",
                  "    pm.expect(target[0]).to.have.property('initiator');\r",
                  "    pm.expect(target[0]).to.have.property('views');\r",
                  "    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должно быть найдено два события\", function () {\r",
                  "    pm.expect(target.length).to.eql(2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам\", ()=> {\r",
                  "    const e1 = target.find(e => e.id == eventVisibleForFollowers.id)\r",
                  "    pm.expect(e1.annotation).equal(eventVisibleForFollowers.annotation);\r",
                  "    pm.expect(e1.category.id).equal(eventVisibleForFollowers.category.id);\r",
                  "    pm.expect(e1.paid.toString()).equal(eventVisibleForFollowers.paid.toString());\r",
                  "    pm.expect(e1.eventDate).equal(eventVisibleForFollowers.eventDate);\r",
                  "    pm.expect(e1.title).equal(eventVisibleForFollowers.title);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое только друзьям\", ()=> {\r",
                  "    const e2 = target.find(e => e.id == eventVisibleForFriends.id)\r",
                  "    pm.expect(e2.annotation).equal(eventVisibleForFriends.annotation);\r",
                  "    pm.expect(e2.category.id).equal(eventVisibleForFriends.category.id);\r",
                  "    pm.expect(e2.paid.toString()).equal(eventVisibleForFriends.paid.toString());\r",
                  "    pm.expect(e2.eventDate).equal(eventVisibleForFriends.eventDate);\r",
                  "    pm.expect(e2.title).equal(eventVisibleForFriends.title);\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    const friendId = pm.collectionVariables.get('friendId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/:friendId/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                ":friendId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "friendId",
                  "value": "{{friendId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get_Friends_Events",
      "item": [
        {
          "name": "Получение событий когда у пользователя нет друзей и подписок",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId1 = ids[1]\r",
                  "const followerId2 = ids[2]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(followerId1, userId)\r",
                  "    await api.cancelFriend(userId, followerId1)\r",
                  "\r",
                  "    await api.addFriend(followerId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const users = pm.collectionVariables.get('addedUsers')\r",
                  "    const api = new API(pm)\r",
                  "    const ids = api.getIdsFromSavedUserObject(users)\r",
                  "    const userId = ids[0]\r",
                  "    const followerId1 = ids[1]\r",
                  "    const followerId2 = ids[2]\r",
                  "    await api.deleteFriend(followerId1, userId)\r",
                  "    await api.deleteFriend(followerId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий когда у пользователя нет друзей и подписок",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followerId1 = ids[1]\r",
                  "const followerId2 = ids[2]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(followerId1, userId)\r",
                  "    await api.cancelFriend(userId, followerId1)\r",
                  "\r",
                  "    await api.addFriend(followerId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const users = pm.collectionVariables.get('addedUsers')\r",
                  "    const api = new API(pm)\r",
                  "    const ids = api.getIdsFromSavedUserObject(users)\r",
                  "    const userId = ids[0]\r",
                  "    const followerId1 = ids[1]\r",
                  "    const followerId2 = ids[2]\r",
                  "    await api.deleteFriend(followerId1, userId)\r",
                  "    await api.deleteFriend(followerId2, userId)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/events?onlyFriends=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "events"
              ],
              "query": [
                {
                  "key": "onlyFriends",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий когда у пользователя нет друзей но есть подписки",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followingId1 = ids[1]\r",
                  "const followingId2 = ids[2]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "    await api.cancelFriend(followingId1, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 404 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(404)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const users = pm.collectionVariables.get('addedUsers')\r",
                  "    const api = new API(pm)\r",
                  "    const ids = api.getIdsFromSavedUserObject(users)\r",
                  "    const userId = ids[0]\r",
                  "    const followingId1 = ids[1]\r",
                  "    const followingId2 = ids[2]\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/events?onlyFriends=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "events"
              ],
              "query": [
                {
                  "key": "onlyFriends",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий когда у пользователя нет друзей но есть подписки",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followingId1 = ids[1]\r",
                  "const followingId2 = ids[2]\r",
                  "const followingId3 = ids[3]\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventNotVisible = eventIds[3]\r",
                  "const eventVisibleForFriends = eventIds[4]\r",
                  "const eventVisibleForFollowers = eventIds[5]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "    await api.cancelFriend(followingId1, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId3)\r",
                  "\r",
                  "    await api.publishParticipationRequest(eventNotVisible, followingId2, 'NONE')\r",
                  "    await api.publishParticipationRequest(eventVisibleForFriends, followingId2, 'FRIENDS')\r",
                  "    await api.publishParticipationRequest(eventVisibleForFollowers, followingId2, 'FOLLOWERS')\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventVisibleForFollowers1 = events[eventIds[2]]\r",
                  "const eventVisibleForFollowers2 = events[eventIds[5]]\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const followingId1 = ids[1]\r",
                  "const followingId2 = ids[2]\r",
                  "const followingId3 = ids[3]\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('title');\r",
                  "    pm.expect(target[0]).to.have.property('annotation');\r",
                  "    pm.expect(target[0]).to.have.property('category');\r",
                  "    pm.expect(target[0]).to.have.property('paid');\r",
                  "    pm.expect(target[0]).to.have.property('eventDate');\r",
                  "    pm.expect(target[0]).to.have.property('initiator');\r",
                  "    pm.expect(target[0]).to.have.property('views');\r",
                  "    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должно быть найдено два события\", function () {\r",
                  "    pm.expect(target.length).to.eql(2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам от первой подписки\", ()=> {\r",
                  "    const e1 = target.find(e => e.id == eventVisibleForFollowers1.id)\r",
                  "    pm.expect(e1.annotation).equal(eventVisibleForFollowers1.annotation);\r",
                  "    pm.expect(e1.category.id).equal(eventVisibleForFollowers1.category.id);\r",
                  "    pm.expect(e1.paid.toString()).equal(eventVisibleForFollowers1.paid.toString());\r",
                  "    pm.expect(e1.eventDate).equal(eventVisibleForFollowers1.eventDate);\r",
                  "    pm.expect(e1.title).equal(eventVisibleForFollowers1.title);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам от второй подписки\", ()=> {\r",
                  "    const e2 = target.find(e => e.id == eventVisibleForFollowers2.id)\r",
                  "    pm.expect(e2.annotation).equal(eventVisibleForFollowers2.annotation);\r",
                  "    pm.expect(e2.category.id).equal(eventVisibleForFollowers2.category.id);\r",
                  "    pm.expect(e2.paid.toString()).equal(eventVisibleForFollowers2.paid.toString());\r",
                  "    pm.expect(e2.eventDate).equal(eventVisibleForFollowers2.eventDate);\r",
                  "    pm.expect(e2.title).equal(eventVisibleForFollowers2.title);\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "    await api.deleteFriend(userId, followingId3)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий только от друзей, когда у пользователя есть и друзья и подписки",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followingId1 = ids[2]\r",
                  "const followingId2 = ids[3]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "    await api.cancelFriend(followingId1, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventVisibleForFollowers = events[eventIds[2]]\r",
                  "const eventVisibleForFriends = events[eventIds[1]]\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followingId1 = ids[2]\r",
                  "const followingId2 = ids[3]\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('title');\r",
                  "    pm.expect(target[0]).to.have.property('annotation');\r",
                  "    pm.expect(target[0]).to.have.property('category');\r",
                  "    pm.expect(target[0]).to.have.property('paid');\r",
                  "    pm.expect(target[0]).to.have.property('eventDate');\r",
                  "    pm.expect(target[0]).to.have.property('initiator');\r",
                  "    pm.expect(target[0]).to.have.property('views');\r",
                  "    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должно быть найдено два события\", function () {\r",
                  "    pm.expect(target.length).to.eql(2)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам\", ()=> {\r",
                  "    const e1 = target.find(e => e.id == eventVisibleForFollowers.id)\r",
                  "    pm.expect(e1.annotation).equal(eventVisibleForFollowers.annotation);\r",
                  "    pm.expect(e1.category.id).equal(eventVisibleForFollowers.category.id);\r",
                  "    pm.expect(e1.paid.toString()).equal(eventVisibleForFollowers.paid.toString());\r",
                  "    pm.expect(e1.eventDate).equal(eventVisibleForFollowers.eventDate);\r",
                  "    pm.expect(e1.title).equal(eventVisibleForFollowers.title);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое друзьям\", ()=> {\r",
                  "    const e2 = target.find(e => e.id == eventVisibleForFriends.id)\r",
                  "    pm.expect(e2.annotation).equal(eventVisibleForFriends.annotation);\r",
                  "    pm.expect(e2.category.id).equal(eventVisibleForFriends.category.id);\r",
                  "    pm.expect(e2.paid.toString()).equal(eventVisibleForFriends.paid.toString());\r",
                  "    pm.expect(e2.eventDate).equal(eventVisibleForFriends.eventDate);\r",
                  "    pm.expect(e2.title).equal(eventVisibleForFriends.title);\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/events?onlyFriends=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "events"
              ],
              "query": [
                {
                  "key": "onlyFriends",
                  "value": "true"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий, когда у пользователя есть и друзья и подписки",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followingId1 = ids[2]\r",
                  "const followingId2 = ids[3]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "    await api.cancelFriend(followingId1, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventVisibleForFollowers1 = events[eventIds[2]]\r",
                  "const eventVisibleForFollowers2 = events[eventIds[5]]\r",
                  "const eventVisibleForFriends = events[eventIds[1]]\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followingId1 = ids[2]\r",
                  "const followingId2 = ids[3]\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('title');\r",
                  "    pm.expect(target[0]).to.have.property('annotation');\r",
                  "    pm.expect(target[0]).to.have.property('category');\r",
                  "    pm.expect(target[0]).to.have.property('paid');\r",
                  "    pm.expect(target[0]).to.have.property('eventDate');\r",
                  "    pm.expect(target[0]).to.have.property('initiator');\r",
                  "    pm.expect(target[0]).to.have.property('views');\r",
                  "    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должно быть найдено два события\", function () {\r",
                  "    pm.expect(target.length).to.eql(3)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам от друга\", ()=> {\r",
                  "    const e1 = target.find(e => e.id == eventVisibleForFollowers1.id)\r",
                  "    pm.expect(e1.annotation).equal(eventVisibleForFollowers1.annotation);\r",
                  "    pm.expect(e1.category.id).equal(eventVisibleForFollowers1.category.id);\r",
                  "    pm.expect(e1.paid.toString()).equal(eventVisibleForFollowers1.paid.toString());\r",
                  "    pm.expect(e1.eventDate).equal(eventVisibleForFollowers1.eventDate);\r",
                  "    pm.expect(e1.title).equal(eventVisibleForFollowers1.title);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам от подписки\", ()=> {\r",
                  "    const e1 = target.find(e => e.id == eventVisibleForFollowers2.id)\r",
                  "    pm.expect(e1.annotation).equal(eventVisibleForFollowers2.annotation);\r",
                  "    pm.expect(e1.category.id).equal(eventVisibleForFollowers2.category.id);\r",
                  "    pm.expect(e1.paid.toString()).equal(eventVisibleForFollowers2.paid.toString());\r",
                  "    pm.expect(e1.eventDate).equal(eventVisibleForFollowers2.eventDate);\r",
                  "    pm.expect(e1.title).equal(eventVisibleForFollowers2.title);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое друзьям от друга\", ()=> {\r",
                  "    const e2 = target.find(e => e.id == eventVisibleForFriends.id)\r",
                  "    pm.expect(e2.annotation).equal(eventVisibleForFriends.annotation);\r",
                  "    pm.expect(e2.category.id).equal(eventVisibleForFriends.category.id);\r",
                  "    pm.expect(e2.paid.toString()).equal(eventVisibleForFriends.paid.toString());\r",
                  "    pm.expect(e2.eventDate).equal(eventVisibleForFriends.eventDate);\r",
                  "    pm.expect(e2.title).equal(eventVisibleForFriends.title);\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение событий, когда события друзей и подписчиков пересекаются",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const api = new API(pm)\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followingId1 = ids[2]\r",
                  "const followingId2 = ids[3]\r",
                  "\r",
                  "pm.collectionVariables.set('userId', userId)\r",
                  "\r",
                  "const main = async () => {\r",
                  "    await api.addFriend(userId, friendId)\r",
                  "    await api.addFriend(friendId, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId1)\r",
                  "    await api.cancelFriend(followingId1, userId)\r",
                  "\r",
                  "    await api.addFriend(userId, followingId2)\r",
                  "\r",
                  "    await api.publishParticipationRequest(eventIds[1], followingId2, 'NONE')\r",
                  "    await api.publishParticipationRequest(eventIds[2], followingId2, 'FOLLOWERS')\r",
                  "    await api.publishParticipationRequest(eventIds[5], followingId2, 'FRIENDS')\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000)\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main()\r",
                  "        } catch (e) {\r",
                  "            console.error(e)\r",
                  "        } finally {\r",
                  "            clearInterval(interval)\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Код ответа - 200 и тело в формате json\", function () {\r",
                  "    pm.response.to.have.status(200)\r",
                  "    pm.response.to.be.withBody\r",
                  "    pm.response.to.be.json\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const api = new API(pm)\r",
                  "const events = pm.collectionVariables.get('addedEvents')\r",
                  "const users = pm.collectionVariables.get('addedUsers')\r",
                  "const eventIds = api.getIdsFromSavedUserObject(events)\r",
                  "const eventVisibleForFollowers1 = events[eventIds[2]]\r",
                  "const eventVisibleForFollowers2 = events[eventIds[5]]\r",
                  "const eventVisibleForFriends = events[eventIds[1]]\r",
                  "const ids = api.getIdsFromSavedUserObject(users)\r",
                  "const userId = ids[0]\r",
                  "const friendId = ids[1]\r",
                  "const followingId1 = ids[2]\r",
                  "const followingId2 = ids[3]\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('title');\r",
                  "    pm.expect(target[0]).to.have.property('annotation');\r",
                  "    pm.expect(target[0]).to.have.property('category');\r",
                  "    pm.expect(target[0]).to.have.property('paid');\r",
                  "    pm.expect(target[0]).to.have.property('eventDate');\r",
                  "    pm.expect(target[0]).to.have.property('initiator');\r",
                  "    pm.expect(target[0]).to.have.property('views');\r",
                  "    pm.expect(target[0]).to.have.property('confirmedRequests');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должно быть найдено два события\", function () {\r",
                  "    pm.expect(target.length).to.eql(3)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам от друга\", ()=> {\r",
                  "    const e1 = target.find(e => e.id == eventVisibleForFollowers1.id)\r",
                  "    pm.expect(e1.annotation).equal(eventVisibleForFollowers1.annotation);\r",
                  "    pm.expect(e1.category.id).equal(eventVisibleForFollowers1.category.id);\r",
                  "    pm.expect(e1.paid.toString()).equal(eventVisibleForFollowers1.paid.toString());\r",
                  "    pm.expect(e1.eventDate).equal(eventVisibleForFollowers1.eventDate);\r",
                  "    pm.expect(e1.title).equal(eventVisibleForFollowers1.title);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое подписчикам от подписки\", ()=> {\r",
                  "    const e1 = target.find(e => e.id == eventVisibleForFollowers2.id)\r",
                  "    pm.expect(e1.annotation).equal(eventVisibleForFollowers2.annotation);\r",
                  "    pm.expect(e1.category.id).equal(eventVisibleForFollowers2.category.id);\r",
                  "    pm.expect(e1.paid.toString()).equal(eventVisibleForFollowers2.paid.toString());\r",
                  "    pm.expect(e1.eventDate).equal(eventVisibleForFollowers2.eventDate);\r",
                  "    pm.expect(e1.title).equal(eventVisibleForFollowers2.title);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"В ответе должно быть найдено событие видимое друзьям от друга\", ()=> {\r",
                  "    const e2 = target.find(e => e.id == eventVisibleForFriends.id)\r",
                  "    pm.expect(e2.annotation).equal(eventVisibleForFriends.annotation);\r",
                  "    pm.expect(e2.category.id).equal(eventVisibleForFriends.category.id);\r",
                  "    pm.expect(e2.paid.toString()).equal(eventVisibleForFriends.paid.toString());\r",
                  "    pm.expect(e2.eventDate).equal(eventVisibleForFriends.eventDate);\r",
                  "    pm.expect(e2.title).equal(eventVisibleForFriends.title);\r",
                  "});\r",
                  "\r",
                  "const main = async () => {\r",
                  "    const userId = pm.collectionVariables.get('userId')\r",
                  "    await api.deleteFriend(userId, friendId)\r",
                  "    await api.deleteFriend(friendId, userId)\r",
                  "    await api.deleteFriend(userId, followingId1)\r",
                  "    await api.deleteFriend(userId, followingId2)\r",
                  "}\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/friends/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                ":userId",
                "friends",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, visibility='FOLLOWERS', verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId + '&visibility=' + visibility, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async addFriend(userId, friendId, verbose=null){",
          "        return this.post('/users/' + userId + '/friends/' + friendId + '/', null, 'Ошибка при добавлении друга', verbose)",
          "    }",
          "",
          "    async deleteFriend(userId, friendId, verbose=null){",
          "        return this.delete('/users/' + userId + '/friends/' + friendId + '/', null, 'Ошибка при удалении друга', verbose)",
          "    }",
          "",
          "    async cancelFriend(userId, friendId, verbose=null){",
          "        return this.patch('/users/' + userId + '/friends/' + friendId + '/cancel', null, 'Ошибка при отмене запроса дружбы', verbose)",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null){",
          "        return this.sendRequest(\"DELETE\", path, body, errorText, verbose)",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        if (response.responseSize > 0){",
          "                            console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                        }else{",
          "                            console.log(\"Результат обработки запроса: код состояния - \", response.code);",
          "                        }      ",
          "                    }",
          "",
          "                    if (response.responseSize > 0){",
          "                        resolve(response.json());",
          "                    }else{",
          "                        resolve({})",
          "                    }",
          "                    ",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "",
          "    getIdsFromSavedUserObject(users){",
          "        const ids = []",
          "    ",
          "        Object.keys(users).forEach(key => {",
          "            if (key !== 'params'){",
          "                ids.add(key)",
          "            }",
          "        })",
          "",
          "        return ids",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('false'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}",
          "",
          "const mainInit = async () => {",
          "    const api = new API(pm);",
          "    const rnd = new RandomUtils();",
          "",
          "    const addedUsers = {}",
          "    const paramData = {}",
          "",
          "    for(let i = 0; i < 6; i++){",
          "        const addedUser = await api.addUser(rnd.getUser())",
          "        const userId = addedUser.id",
          "",
          "        addedUsers[userId] = addedUser",
          "",
          "        if (i === 0){",
          "            paramData.firstId = userId;",
          "        }",
          "",
          "        if (i === 5){",
          "            paramData.lastId = userId;",
          "        }",
          "    }",
          "",
          "    addedUsers.params = paramData",
          "",
          "    pm.collectionVariables.set('addedUsers', addedUsers)",
          "",
          "    const addedEvents = {}",
          "    const addedCategories = {}",
          "",
          "    for(let i = 0; i < 6; i++){",
          "        const addedCategory = await api.addCategory(rnd.getCategory())",
          "        const catId = addedCategory.id",
          "        const addedEvent = await api.addEvent(addedUsers.params.lastId, rnd.getEvent(catId))",
          "        const eventId = addedEvent.id",
          "        api.publishEvent(eventId)",
          "",
          "        addedEvents[eventId] = addedEvent",
          "        addedCategories[catId] = addedCategory",
          "    }",
          "",
          "    pm.collectionVariables.set('addedEvents', addedEvents)",
          "    pm.collectionVariables.set('addedCategories', addedCategories)",
          "    ",
          "    pm.collectionVariables.set('is_first_init_done', true)",
          "}",
          "",
          "const isInitDone = pm.collectionVariables.get('is_first_init_done')",
          "",
          "if (isInitDone === 'false'){",
          "    const interval = setInterval(() => {}, 1000);",
          "",
          "    setTimeout(async () => ",
          "        {",
          "            try {",
          "                await mainInit();",
          "            } catch (e) {",
          "                console.error(e);",
          "            } finally {",
          "                clearInterval(interval);",
          "            }",
          "        },  ",
          "        100 ",
          "    );",
          "}",
          "",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "is_first_init_done",
      "value": "false"
    },
    {
      "key": "addedUsers",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "friendId",
      "value": ""
    },
    {
      "key": "followerId",
      "value": ""
    },
    {
      "key": "addedEvents",
      "value": ""
    },
    {
      "key": "addedCategories",
      "value": ""
    }
  ]
}