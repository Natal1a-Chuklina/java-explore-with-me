{
  "openapi": "3.0.1",
  "info": {
    "description": "Documentation \"Explore With Me\" API v1.0",
    "title": "\"Explore With Me\" API сервер",
    "version": "1.0"
  },
  "servers": [
    {
      "description": "Generated server url",
      "url": "http://localhost:8080"
    }
  ],
  "tags": [
    {
      "description": "Публичный API для работы с подборками событий",
      "name": "Public: Подборки событий"
    },
    {
      "description": "API для админов для работы с подборками событий",
      "name": "Admin: Подборки событий"
    },
    {
      "description": "Публичный API для работы с категориями",
      "name": "Public: Категории"
    },
    {
      "description": "API для админов для работы с категориями",
      "name": "Admin: Категории"
    },
    {
      "description": "Публичный API для работы с событиями",
      "name": "Public: События"
    },
    {
      "description": "API для авторизованных пользователей для работы с событиями",
      "name": "Private: События"
    },
    {
      "description": "API для админов для работы с событиями",
      "name": "Admin: События"
    },
    {
      "description": "API для авторизованных пользователей для работы с запросами на участие в событиях",
      "name": "Private: Запросы на участие"
    },
    {
      "description": "API для админов для работы с пользователями",
      "name": "Admin: Пользователи"
    },
    {
      "description": "API для авторизованных пользователей для работы с дружбой и подписками",
      "name": "Private: Дружба и подписки"
    }
  ],
  "paths": {
    "/admin/categories": {
      "post": {
        "description": "Обратите внимание: имя категории должно быть уникальным",
        "operationId": "addCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCategoryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDto"
                }
              }
            },
            "description": "Категория добавлена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Validation failed for argument [0] in public ru.practicum.category.dto.CategoryDto ru.practicum.category.controller.CategoryAdminController.createCategory(ru.practicum.category.dto.NewCategoryDto): [Field error in object 'newCategoryDto' on field 'name': rejected value [null]; codes [NotBlank.newCategoryDto.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [newCategoryDto.name,name]; arguments []; default message [name]]; default message [must not be blank]]",
                  "timestamp": "2024-02-08 18:54:46"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2024-02-08 18:53:16"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Создание категории с уже существующим названием"
          }
        },
        "summary": "Добавление новой категории",
        "tags": [
          "Admin: Категории"
        ]
      }
    },
    "/admin/categories/{catId}": {
      "delete": {
        "description": "Обратите внимание: с категорией не должно быть связано ни одно событие",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "description": "id категории",
            "in": "path",
            "name": "catId",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Категория удалена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "deleteCategory.catId: must be greater than 0",
                  "timestamp": "2024-02-08 18:54:46"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Category with id=2 was not found.",
                  "timestamp": "2024-02-08 19:46:41"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Категория не найдена"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [fk_event_category]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2024-02-08 19:51:33"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Удаление категории со связанными событиями"
          }
        },
        "summary": "Удаление категории",
        "tags": [
          "Admin: Категории"
        ]
      },
      "patch": {
        "description": "Обратите внимание: имя категории должно быть уникальным",
        "operationId": "updateCategory",
        "parameters": [
          {
            "description": "id категории",
            "in": "path",
            "name": "catId",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCategoryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDto"
                }
              }
            },
            "description": "Данные категории изменены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Validation failed for argument [0] in public ru.practicum.category.dto.CategoryDto ru.practicum.category.controller.CategoryAdminController.updateCategory(ru.practicum.category.dto.NewCategoryDto,long): [Field error in object 'newCategoryDto' on field 'name': rejected value [  ]; codes [NotBlank.newCategoryDto.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [newCategoryDto.name,name]; arguments []; default message [name]]; default message [must not be blank]]",
                  "timestamp": "2024-02-08 20:10:34"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Category with id=1 was not found.",
                  "timestamp": "2024-02-08 20:08:22"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Категория не найдена"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2024-02-08 20:09:40"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Изменение имени категории на уже существующее"
          }
        },
        "summary": "Изменение категории",
        "tags": [
          "Admin: Категории"
        ]
      }
    },
    "/admin/compilations": {
      "post": {
        "description": "Обратите внимание: \n - подборка может не содержать событий\n - заголовок подборки должен быть уникальным",
        "operationId": "saveCompilation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompilationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompilationDto"
                }
              }
            },
            "description": "Подборка добавлена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Validation failed for argument [0] in public ru.practicum.compilation.dto.CompilationDto ru.practicum.compilation.controller.CompilationAdminController.createCompilation(ru.practicum.compilation.dto.NewCompilationDto): [Field error in object 'newCompilationDto' on field 'title': rejected value [ ]; codes [NotBlank.newCompilationDto.title,NotBlank.title,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [newCompilationDto.title,title]; arguments []; default message [title]]; default message [must not be blank]]  ",
                  "timestamp": "2024-02-10 12:48:54"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Not all events were found.",
                  "timestamp": "2024-02-10 12:53:12"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие из списка событий не найдено"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_compilation_title]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2024-02-10 12:50:34"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Создание подборки с уже существующим названием"
          }
        },
        "summary": "Добавление новой подборки",
        "tags": [
          "Admin: Подборки событий"
        ]
      }
    },
    "/admin/compilations/{compId}": {
      "delete": {
        "operationId": "deleteCompilation",
        "parameters": [
          {
            "description": "id подборки",
            "in": "path",
            "name": "compId",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Подборка удалена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "deleteCompilation.compId: must be greater than 0",
                  "timestamp": "2024-02-11 16:11:42"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Compilation with id=1 was not found",
                  "timestamp": "2024-02-11 16:09:50"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Подборка не найдена"
          }
        },
        "summary": "Удаление подборки",
        "tags": [
          "Admin: Подборки событий"
        ]
      },
      "patch": {
        "description": "Обратите внимание:\n- если поле в запросе не указано, равно null или пустое, то изменение этих данных не будет выполнено \n - заголовок подборки должен быть уникальным",
        "operationId": "updateCompilation",
        "parameters": [
          {
            "description": "id подборки",
            "in": "path",
            "name": "compId",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompilationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompilationDto"
                }
              }
            },
            "description": "Подборка обновлена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "updateCompilation.compId: must be greater than 0",
                  "timestamp": "2024-02-11 16:57:15"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Compilation with id=50 was not found.",
                  "timestamp": "2024-02-11 16:49:11"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Подборка не найдена"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_compilation_title]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2024-02-11 16:54:56"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Обновление имени подборки на уже существующее"
          }
        },
        "summary": "Обновление подборки",
        "tags": [
          "Admin: Подборки событий"
        ]
      }
    },
    "/admin/events": {
      "get": {
        "description": "Возвращает полную информацию обо всех событиях, подходящих под переданные условия",
        "operationId": "getEvents_2",
        "parameters": [
          {
            "description": "список id пользователей, чьи события нужно найти",
            "in": "query",
            "name": "users",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "список состояний, в которых находятся искомые события",
            "in": "query",
            "name": "states",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "список id категорий, в которых будет вестись поиск",
            "in": "query",
            "name": "categories",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "дата и время, не раньше которых должно произойти событие",
            "in": "query",
            "name": "rangeStart",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "дата и время, не позже которых должно произойти событие",
            "in": "query",
            "name": "rangeEnd",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "количество событий, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество событий в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventFullDto"
                  }
                }
              }
            },
            "description": "События найдены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getEvents.from: must be greater than or equal to 0",
                  "timestamp": "2024-02-12 01:04:57"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          }
        },
        "summary": "Поиск событий",
        "tags": [
          "Admin: События"
        ]
      }
    },
    "/admin/events/{eventId}": {
      "patch": {
        "description": "Обратите внимание:\n - если поле в запросе не указано, равно null или пустое, то изменение этих данных не будет выполнено \n - дата начала изменяемого события должна быть не ранее чем за час от даты публикации. (Ожидается код ошибки 400)\n- событие можно опубликовать, только если оно в состоянии ожидания публикации (Ожидается код ошибки 409)\n- событие можно отклонить, только если оно еще не опубликовано (Ожидается код ошибки 409)",
        "operationId": "updateEvent_1",
        "parameters": [
          {
            "description": "id события",
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventAdminRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventFullDto"
                }
              }
            },
            "description": "Событие отредактировано"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Event date should be not earlier than 2024-02-12 00:32:57.",
                  "timestamp": "2024-02-11 22:32:57"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Event with id=11 was not found.",
                  "timestamp": "2024-02-11 22:30:27"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не найдено"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "For the requested operation the conditions are not met.",
                  "message": "Cannot publish the event because it's not in the right state: PUBLISHED.",
                  "timestamp": "2024-02-11 22:34:08"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не удовлетворяет правилам редактирования"
          }
        },
        "summary": "Редактирование данных события и его статуса (отклонение/публикация)",
        "tags": [
          "Admin: События"
        ]
      }
    },
    "/admin/users": {
      "get": {
        "description": "Возвращает информацию обо всех пользователях, учитываются параметры ограничения выборки, либо о конкретных, учитываются указанные идентификаторы",
        "operationId": "getUsers",
        "parameters": [
          {
            "description": "id пользователей",
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "количество элементов, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество элементов в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Пользователи найдены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getUsers.size: must be greater than 0",
                  "timestamp": "2024-02-12 08:28:30"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          }
        },
        "summary": "Получение информации о пользователях",
        "tags": [
          "Admin: Пользователи"
        ]
      },
      "post": {
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            },
            "description": "Пользователь создан"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Validation failed for argument [0] in public ru.practicum.user.dto.UserDto ru.practicum.user.controller.UserAdminController.createUser(ru.practicum.user.dto.NewUserRequest) with 2 errors: [Field error in object 'newUserRequest' on field 'name': rejected value [ ]; codes [NotBlank.newUserRequest.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [newUserRequest.name,name]; arguments []; default message [name]]; default message [must not be blank]] [Field error in object 'newUserRequest' on field 'name': rejected value [ ]; codes [Size.newUserRequest.name,Size.name,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [newUserRequest.name,name]; arguments []; default message [name],250,2]; default message [size must be between 2 and 250]]",
                  "timestamp": "2024-02-12 08:41:40"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_user_email]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2024-02-12 08:37:13"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Создание пользователя с уже существующим почтовым адресом"
          }
        },
        "summary": "Добавление нового пользователя",
        "tags": [
          "Admin: Пользователи"
        ]
      }
    },
    "/admin/users/{userId}": {
      "delete": {
        "operationId": "delete",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Пользователь удален"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "deleteUser.userId: must be greater than 0",
                  "timestamp": "2024-02-12 08:46:08"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=3 was not found.",
                  "timestamp": "2024-02-12 08:45:36"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Удаление пользователя",
        "tags": [
          "Admin: Пользователи"
        ]
      }
    },
    "/categories": {
      "get": {
        "operationId": "getCategories",
        "parameters": [
          {
            "description": "количество категорий, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество категорий в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDto"
                  }
                }
              }
            },
            "description": "Категории найдены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getCategories.size: must be greater than 0",
                  "timestamp": "2024-02-12 10:30:44"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          }
        },
        "summary": "Получение категорий",
        "tags": [
          "Public: Категории"
        ]
      }
    },
    "/categories/{catId}": {
      "get": {
        "operationId": "getCategory",
        "parameters": [
          {
            "description": "id категории",
            "in": "path",
            "name": "catId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDto"
                }
              }
            },
            "description": "Категория найдена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getCategoryById.catId: must be greater than 0",
                  "timestamp": "2024-02-12 10:37:32"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Category with id=10 was not found.",
                  "timestamp": "2024-02-12 10:38:23"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Категория не найдена"
          }
        },
        "summary": "Получение информации о категории по её идентификатору",
        "tags": [
          "Public: Категории"
        ]
      }
    },
    "/compilations": {
      "get": {
        "operationId": "getCompilations",
        "parameters": [
          {
            "description": "искать только закрепленные/не закрепленные подборки",
            "in": "query",
            "name": "pinned",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "количество элементов, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество элементов в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompilationDto"
                  }
                }
              }
            },
            "description": "Найдены подборки событий"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getCompilations.size: must be greater than 0",
                  "timestamp": "2024-02-12 10:47:18"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          }
        },
        "summary": "Получение подборок событий",
        "tags": [
          "Public: Подборки событий"
        ]
      }
    },
    "/compilations/{compId}": {
      "get": {
        "operationId": "getCompilation",
        "parameters": [
          {
            "description": "id подборки",
            "in": "path",
            "name": "compId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompilationDto"
                }
              }
            },
            "description": "Подборка событий найдена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getCompilationById.compId: must be greater than 0",
                  "timestamp": "2024-02-12 10:53:14"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Compilation with id=1 was not found.",
                  "timestamp": "2024-02-12 10:52:19"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Подборка не найдена"
          }
        },
        "summary": "Получение подборки событий по ее id",
        "tags": [
          "Public: Подборки событий"
        ]
      }
    },
    "/events": {
      "get": {
        "description": "Обратите внимание: \n- в выдаче присутствуют только опубликованные события\n- текстовый поиск проводится без учета регистра\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то выгружаются события, которые произойдут позже текущей даты и времени\n- информация о том, что по этому эндпоинту был осуществлен и обработан запрос, сохраняется в сервисе статистики",
        "operationId": "getEvents_1",
        "parameters": [
          {
            "description": "текст для поиска в кратком и подробном описаниях событий",
            "in": "query",
            "name": "text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "список идентификаторов категорий, в которых будет вестись поиск",
            "in": "query",
            "name": "categories",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "поиск только платных/бесплатных событий",
            "in": "query",
            "name": "paid",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "дата и время, не раньше которых должно произойти событие",
            "in": "query",
            "name": "rangeStart",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "дата и время, не позже которых должно произойти событие",
            "in": "query",
            "name": "rangeEnd",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "вариант сортировки: по дате события или по количеству просмотров",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EVENT_DATE",
                "VIEWS"
              ]
            }
          },
          {
            "description": "только события, у которых не исчерпан лимит запросов на участие",
            "in": "query",
            "name": "onlyAvailable",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "количество событий, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество событий в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventShortDto"
                  }
                }
              }
            },
            "description": "События найдены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getUserEvents.from: must be greater than or equal to 0",
                  "timestamp": "2024-02-12 11:35:58"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          }
        },
        "summary": "Получение событий с возможностью фильтрации",
        "tags": [
          "Public: События"
        ]
      }
    },
    "/events/{id}": {
      "get": {
        "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о том, что по этому эндпоинту был осуществлен и обработан запрос, сохраняется в сервисе статистики",
        "operationId": "getEvent_1",
        "parameters": [
          {
            "description": "id события",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventFullDto"
                }
              }
            },
            "description": "Событие найдено"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getEventById.eventId: must be greater than 0",
                  "timestamp": "2024-02-12 11:54:33"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Event with id=2 was not found.",
                  "timestamp": "2024-02-12 11:55:15"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не найдено или не опубликовано"
          }
        },
        "summary": "Получение подробной информации об опубликованном событии по его идентификатору",
        "tags": [
          "Public: События"
        ]
      }
    },
    "/users/{userId}/events": {
      "get": {
        "operationId": "getEvents",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "количество элементов, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество элементов в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventShortDto"
                  }
                }
              }
            },
            "description": "События найдены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getUserEvents.userId: must be greater than 0",
                  "timestamp": "2024-02-12 14:13:55"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          }
        },
        "summary": "Получение событий, добавленных пользователем",
        "tags": [
          "Private: События"
        ]
      },
      "post": {
        "description": "Обратите внимание: дата и время, на которые намечено событие, не может быть раньше, чем через два часа от текущего момента",
        "operationId": "addEvent",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEventDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventFullDto"
                }
              }
            },
            "description": "Событие добавлено"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Validation failed for argument [1] in public ru.practicum.event.dto.EventFullDto ru.practicum.event.controller.EventPrivateController.createEvent(long,ru.practicum.event.dto.NewEventDto): [Field error in object 'newEventDto' on field 'category': rejected value [null]; codes [NotNull.newEventDto.category,NotNull.category,NotNull.java.lang.Long,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [newEventDto.category,category]; arguments []; default message [category]]; default message [must not be null]]",
                  "timestamp": "2024-02-12 14:40:52"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Category with id=2 was not found.",
                  "timestamp": "2024-02-12 14:39:39"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Категория не найдена"
          }
        },
        "summary": "Добавление нового события пользователем",
        "tags": [
          "Private: События"
        ]
      }
    },
    "/users/{userId}/events/{eventId}": {
      "get": {
        "operationId": "getEvent",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id события",
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventFullDto"
                }
              }
            },
            "description": "Событие найдено"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getEventById.userId: must be greater than 0",
                  "timestamp": "2024-02-12 14:50:07"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=1 doesn't have the event with id=10.",
                  "timestamp": "2024-02-12 15:09:44"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не найдено у пользователя"
          }
        },
        "summary": "Получение полной информации о событии, добавленном пользователем",
        "tags": [
          "Private: События"
        ]
      },
      "patch": {
        "description": "Обратите внимание: \n - если поле в запросе не указано, равно null или пустое, то изменение этих данных не будет выполнено\n- изменить можно только отмененные события или ожидающие модерации (Ожидается код ошибки 409)\n- дата и время, на которые намечено событие не может быть раньше, чем через два часа от текущего момента (Ожидается код ошибки 400)\n",
        "operationId": "updateEvent",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id редактируемого события",
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventFullDto"
                }
              }
            },
            "description": "Событие обновлено"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "Event date should be not earlier than 2024-02-12 17:29:49.",
                  "timestamp": "2024-02-12 15:29:49"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=1 doesn't have the event with id=10.",
                  "timestamp": "2024-02-12 15:28:13"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не найдено у пользователя"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "For the requested operation the conditions are not met.",
                  "message": "Only pending or canceled events can be changed.",
                  "timestamp": "2024-02-12 15:27:13"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не удовлетворяет правилам редактирования"
          }
        },
        "summary": "Изменение события, добавленного пользователем",
        "tags": [
          "Private: События"
        ]
      }
    },
    "/users/{userId}/events/{eventId}/requests": {
      "get": {
        "operationId": "getEventParticipants",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id события",
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipationRequestDto"
                  }
                }
              }
            },
            "description": "Найдены запросы на участие"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getEventRequests.userId: must be greater than 0",
                  "timestamp": "2024-02-12 15:39:01"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "For the requested operation the conditions are not met.",
                  "message": "Only event initiator can get event participation requests.",
                  "timestamp": "2024-02-12 15:37:26"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не найдено у пользователя"
          }
        },
        "summary": "Получение информации о запросах на участие в событии пользователя",
        "tags": [
          "Private: События"
        ]
      },
      "patch": {
        "description": "Обратите внимание:\n- если для события лимит заявок равен 0 или отключена пре-модерация заявок, то подтверждение заявок не требуется (Ожидается код ошибки 409)\n- нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие (Ожидается код ошибки 409)\n- статус можно изменить только у заявок, находящихся в состоянии ожидания (Ожидается код ошибки 409)\n- если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки отклоняются\n- если после подтверждения всех заявок на участие будет превышен лимит, то ни одна заявка из списка не будет подтверждена (Ожидается код ошибки 409) ",
        "operationId": "changeRequestStatus",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id события пользователя",
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRequestStatusUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRequestStatusUpdateResult"
                }
              }
            },
            "description": "Статус заявок изменён"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "cancelRequest.requestId: must be greater than 0",
                  "timestamp": "2024-02-12 16:39:25"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=1 doesn't have the participation request with id=1.",
                  "timestamp": "2024-02-12 16:38:28"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Заявка на участие в событии не найдена"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "For the requested operation the conditions are not met.",
                  "message": "Event participation requests count is more than available to confirm.",
                  "timestamp": "2024-02-12 16:43:40"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Достигнут лимит одобренных заявок"
          }
        },
        "summary": "Изменение статуса (подтверждение/отклонение) заявок на участие в событии пользователя",
        "tags": [
          "Private: События"
        ]
      }
    },
    "/users/{userId}/friends/{friendId}/events": {
      "get": {
        "description": "Обратите внимание: \n - можно получить события, в которых участвует либо друг пользователя, либо пользователь, на которого он подписан \n - подборка событий будет формироваться с учетом видимости, установленной пользователем, т.е. если пользователь поставил видимость \"FRIENDS\", то события, в которых он участвует, будут видны только друзьям",
        "operationId": "getFriendEvents",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id друга",
            "in": "path",
            "name": "friendId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "текст для поиска в кратком и подробном описаниях событий",
            "in": "query",
            "name": "text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "список идентификаторов категорий, в которых будет вестись поиск",
            "in": "query",
            "name": "categories",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "поиск только платных/бесплатных событий",
            "in": "query",
            "name": "paid",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "дата и время, не раньше которых должно произойти событие",
            "in": "query",
            "name": "rangeStart",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "дата и время, не позже которых должно произойти событие",
            "in": "query",
            "name": "rangeEnd",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "вариант сортировки: по дате события или по количеству просмотров",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EVENT_DATE",
                "VIEWS"
              ]
            }
          },
          {
            "description": "только события, у которых не исчерпан лимит запросов на участие",
            "in": "query",
            "name": "onlyAvailable",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "количество событий, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество событий в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventShortDto"
                  }
                }
              }
            },
            "description": "Найдены события, в которых участвует друг"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getFriendEvents.userId: must be greater than 0",
                  "timestamp": "2024-02-13 17:40:56"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "You aren't friend or follower of user with id=8",
                  "timestamp": "2024-02-13 17:40:00"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Получение событий, в которых участвует друг",
        "tags": [
          "Private: События"
        ]
      }
    },
    "/users/{userId}/friends/events": {
      "get": {
        "description": "Обратите внимание: \n - можно получить события, в которых участвуют либо друзья пользователя, либо пользователи, на которых он подписан \n - подборка событий будет формироваться с учетом видимости, установленной пользователем, т.е. если пользователь поставил видимость \"FRIENDS\", то события, в которых он участвует, будут видны только друзьям",
        "operationId": "getFriendsEvents",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "текст для поиска в кратком и подробном описаниях событий",
            "in": "query",
            "name": "text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "список идентификаторов категорий, в которых будет вестись поиск",
            "in": "query",
            "name": "categories",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "description": "поиск только платных/бесплатных событий",
            "in": "query",
            "name": "paid",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "дата и время, не раньше которых должно произойти событие",
            "in": "query",
            "name": "rangeStart",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "дата и время, не позже которых должно произойти событие",
            "in": "query",
            "name": "rangeEnd",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "вариант сортировки: по дате события или по количеству просмотров",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "EVENT_DATE",
                "VIEWS"
              ]
            }
          },
          {
            "description": "только события, в которых участвую друзья",
            "in": "query",
            "name": "onlyFriends",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "только события, у которых не исчерпан лимит запросов на участие",
            "in": "query",
            "name": "onlyAvailable",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "количество событий, которые нужно пропустить для формирования текущего набора",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "количество событий в наборе",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventShortDto"
                  }
                }
              }
            },
            "description": "Найдены события, в которых участвуют друзья"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getFriendEvents.userId: must be greater than 0",
                  "timestamp": "2024-02-13 17:40:56"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=101 was not found.",
                  "timestamp": "2024-02-13 18:08:19"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Получение событий, в которых участвуют друзья",
        "tags": [
          "Private: События"
        ]
      }
    },
    "/users/{userId}/requests": {
      "get": {
        "operationId": "getUserRequests",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipationRequestDto"
                  }
                }
              }
            },
            "description": "Найдены запросы на участие"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getRequestsByUserId.userId: must be greater than 0",
                  "timestamp": "2024-02-12 17:05:22"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=70 was not found.",
                  "timestamp": "2024-02-12 17:05:52"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Получение информации о заявках пользователя на участие в событиях",
        "tags": [
          "Private: Запросы на участие"
        ]
      },
      "post": {
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос  (Ожидается код ошибки 409)\n- инициатор события не может добавить запрос на участие в своём событии (Ожидается код ошибки 409)\n- нельзя участвовать в неопубликованном событии (Ожидается код ошибки 409)\n- нельзя создать запрос на участие, если у события достигнут лимит участников (Ожидается код ошибки 409)\n- если для события отключена пре-модерация или нет ограничения на количество участников, то запрос автоматически переходит в состояние подтвержденного",
        "operationId": "addParticipationRequest",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id события",
            "in": "query",
            "name": "eventId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "видимость события",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "default": "FOLLOWERS",
              "enum": [
                "FRIENDS",
                "FOLLOWERS",
                "NONE"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationRequestDto"
                }
              }
            },
            "description": "Заявка создана"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "createRequest.eventId: must be greater than 0",
                  "timestamp": "2024-02-12 17:29:36"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Event with id=40 was not found.",
                  "timestamp": "2024-02-12 17:28:21"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Событие не найдено"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "Integrity constraint has been violated.",
                  "message": "could not execute statement; SQL [n/a]; constraint [uq_request]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement",
                  "timestamp": "2024-02-12 17:26:34"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Создание повторной заявки на участие в событии"
          }
        },
        "summary": "Добавление запроса от пользователя на участие в событии",
        "tags": [
          "Private: Запросы на участие"
        ]
      }
    },
    "/users/{userId}/requests/{requestId}/cancel": {
      "patch": {
        "operationId": "cancelRequest",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id запроса на участие",
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationRequestDto"
                }
              }
            },
            "description": "Заявка отменена"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "cancelRequest.requestId: must be greater than 0",
                  "timestamp": "2024-02-12 17:42:15"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=7 doesn't have the participation request with id=6.",
                  "timestamp": "2024-02-12 17:41:31"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос не найден"
          }
        },
        "summary": "Отмена своего запроса на участие в событии",
        "tags": [
          "Private: Запросы на участие"
        ]
      }
    },
    "/users/{userId}/friends/{friendId}": {
      "post": {
        "description": "Обратите внимание: \n - до подтверждения дружбы со стороны другого пользователя пользователь является его подписчиком \n - повторно отправить запрос на дружбу нельзя (Ожидается код ошибки 409)",
        "operationId": "addFriend",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id пользователя, которого нужно добавить в друзья",
            "in": "path",
            "name": "friendId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Запрос на добавление пользователя в друзья отправлен"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "addFriend.userId: must be greater than 0",
                  "timestamp": "2024-02-13 16:27:25"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=2 was not found.",
                  "timestamp": "2024-02-13 16:24:22"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "For the requested operation the conditions are not met.",
                  "message": "You have already sent friendship request to user with id=6.",
                  "timestamp": "2024-02-13 16:29:49"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Повторная отправка запроса на добавление в друзья"
          }
        },
        "summary": "Запрос на добавление пользователя в друзья",
        "tags": [
          "Private: Дружба и подписки"
        ]
      },
      "delete": {
        "description": "Обратите внимание: после удаления из друзей пользователь может остаться подписчиком текущего пользователя",
        "operationId": "deleteFriend",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id пользователя, которого нужно удалить из друзей",
            "in": "path",
            "name": "friendId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Пользователь удален из друзей"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "deleteFriend.friendId: must be greater than 0",
                  "timestamp": "2024-02-13 16:38:21"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "You don't following user with id=6 and he isn't your friend.",
                  "timestamp": "2024-02-13 16:37:13"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Удаление пользователя из друзей",
        "tags": [
          "Private: Дружба и подписки"
        ]
      }
    },
    "/users/{userId}/friends/{friendId}/cancle": {
      "patch": {
        "description": "Обратите внимание: если дружба с этим пользователем уже подтверждена или отклонена, то заявку отклонить нельзя, можно только удалить пользователя из друзей или добавить в друзья, соответственно",
        "operationId": "cancelFriendshipRequest",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id пользователя, заявку которого нужно отклонить",
            "in": "path",
            "name": "friendId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Запрос на добавление пользователя в друзья отклонен"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "cancelFriendshipRequest.friendId: must be greater than 0",
                  "timestamp": "2024-02-13 16:43:13"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Friendship request from user with id=5 doesn't found.",
                  "timestamp": "2024-02-13 16:44:16"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Отклонение запроса на добавление пользователя в друзья",
        "tags": [
          "Private: Дружба и подписки"
        ]
      }
    },
    "/users/{userId}/friends/{followerId}": {
      "delete": {
        "description": "Обратите внимание: если заявка от пользователя на дружбу не отклонена, то его нельзя удалить из подписчиков, сначала нужно отклонить заявку",
        "operationId": "deleteFollower",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "id пользователя, которого нужно удалить из подписчиков",
            "in": "path",
            "name": "followerId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Подписчик удален"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "deleteFollower.followerId: must be greater than 0",
                  "timestamp": "2024-02-13 16:55:17"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "Follower with id=5 was not found.",
                  "timestamp": "2024-02-13 16:54:47"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "status": "CONFLICT",
                  "reason": "For the requested operation the conditions are not met.",
                  "message": "You have to cancel friendship request from user with id=6 before removing him from followers.",
                  "timestamp": "2024-02-13 16:52:36"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Удаление из подписчиков пользователя, заявка которого еще не отклонена"
          }
        },
        "summary": "Удаление пользователя из подписчиков",
        "tags": [
          "Private: Дружба и подписки"
        ]
      }
    },
    "/users/{userId}/friends/requests": {
      "get": {
        "operationId": "gettingFriendshipRequests",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Заявки получены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "gettingFriendshipRequests.userId: must be greater than 0",
                  "timestamp": "2024-02-13 17:03:29"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found.",
                  "timestamp": "2024-02-13 17:04:01"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Получение заявок на добавление в друзья",
        "tags": [
          "Private: Дружба и подписки"
        ]
      }
    },
    "/users/{userId}/friends": {
      "get": {
        "operationId": "getFriends",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Друзья получены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getFriends.userId: must be greater than 0",
                  "timestamp": "2024-02-13 17:03:29"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found.",
                  "timestamp": "2024-02-13 17:04:01"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Получение друзей",
        "tags": [
          "Private: Дружба и подписки"
        ]
      }
    },
    "/users/{userId}/followers": {
      "get": {
        "operationId": "getFollowers",
        "parameters": [
          {
            "description": "id пользователя",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "подписки или подписчиков нужно получить",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "FOLLOWING",
                "FOLLOWED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "description": "Подписки или подписчики получены"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "status": "BAD_REQUEST",
                  "reason": "Incorrectly made request.",
                  "message": "getFollowers.userId: must be greater than 0",
                  "timestamp": "2024-02-13 17:03:29"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Запрос составлен некорректно"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "status": "NOT_FOUND",
                  "reason": "The required object was not found.",
                  "message": "User with id=11 was not found.",
                  "timestamp": "2024-02-13 17:04:01"
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            },
            "description": "Пользователь не найден"
          }
        },
        "summary": "Получение подписок или подписчиков",
        "tags": [
          "Private: Дружба и подписки"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Код статуса HTTP-ответа",
            "example": "FORBIDDEN",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "reason": {
            "type": "string",
            "description": "Общее описание причины ошибки",
            "example": "For the requested operation the conditions are not met."
          },
          "message": {
            "type": "string",
            "description": "Сообщение об ошибке",
            "example": "Only pending or canceled events can be changed"
          },
          "timestamp": {
            "type": "string",
            "description": "Дата и время ошибки в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2024-02-12 18:00:59"
          }
        },
        "description": "Сведения об ошибке"
      },
      "CategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор категории",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Название категории",
            "example": "Концерты"
          }
        },
        "description": "Категория"
      },
      "CompilationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор подборки",
            "format": "int64",
            "example": 1
          },
          "pinned": {
            "type": "boolean",
            "description": "Закреплена ли подборка на главной странице сайта",
            "example": true
          },
          "title": {
            "type": "string",
            "description": "Заголовок подборки",
            "example": "Летние концерты"
          },
          "events": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список событий, входящих в подборку",
            "items": {
              "$ref": "#/components/schemas/EventShortDto"
            }
          }
        },
        "description": "Подборка событий"
      },
      "EventFullDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 1
          },
          "annotation": {
            "type": "string",
            "description": "Краткое описание",
            "example": "Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryDto"
          },
          "confirmedRequests": {
            "type": "integer",
            "description": "Количество одобренных заявок на участие в данном событии",
            "format": "int32",
            "example": 5
          },
          "eventDate": {
            "type": "string",
            "description": "Дата и время, на которые намечено событие, в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2024-12-31 15:10:05"
          },
          "initiator": {
            "$ref": "#/components/schemas/UserShortDto"
          },
          "paid": {
            "type": "boolean",
            "description": "Нужно ли оплачивать участие",
            "example": true
          },
          "title": {
            "type": "string",
            "description": "Заголовок",
            "example": "Знаменитое шоу 'Летающая кукуруза'"
          },
          "views": {
            "type": "integer",
            "description": "Количество просмотров события",
            "format": "int32",
            "example": 999
          },
          "createdOn": {
            "type": "string",
            "description": "Дата и время создания события в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2024-02-12 18:00:59"
          },
          "description": {
            "type": "string",
            "description": "Полное описание события",
            "example": "Что получится, если соединить кукурузу и полёт? Создатели \"Шоу летающей кукурузы\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения..."
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "participantLimit": {
            "type": "integer",
            "description": "Ограничение на количество участников. Значение 0 означает отсутствие ограничения",
            "format": "int32",
            "example": 10,
            "default": 0
          },
          "publishedOn": {
            "type": "string",
            "description": "Дата и время публикации события в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2024-02-12 18:00:59"
          },
          "requestModeration": {
            "type": "boolean",
            "description": "Нужна ли пре-модерация заявок на участие",
            "example": true,
            "default": true
          },
          "state": {
            "type": "string",
            "description": "Состояние события",
            "example": "PUBLISHED",
            "enum": [
              "PENDING",
              "PUBLISHED",
              "CANCELED"
            ]
          }
        },
        "description": "Событие"
      },
      "EventRequestStatusUpdateRequest": {
        "type": "object",
        "properties": {
          "requestIds": {
            "type": "array",
            "description": "Идентификаторы запросов на участие в событии пользователя",
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "status": {
            "type": "string",
            "description": "Новый статус запроса на участие в событии пользователя",
            "example": "CONFIRMED",
            "enum": [
              "CONFIRMED",
              "REJECTED"
            ]
          }
        },
        "description": "Данные для изменения статуса запроса на участие в событии пользователя"
      },
      "EventRequestStatusUpdateResult": {
        "type": "object",
        "properties": {
          "confirmedRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipationRequestDto"
            }
          },
          "rejectedRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipationRequestDto"
            }
          }
        },
        "description": "Результат подтверждения/отклонения заявок на участие в событии"
      },
      "EventShortDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 1
          },
          "annotation": {
            "type": "string",
            "description": "Краткое описание",
            "example": "Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryDto"
          },
          "confirmedRequests": {
            "type": "integer",
            "description": "Количество одобренных заявок на участие в данном событии",
            "format": "int32",
            "example": 5
          },
          "eventDate": {
            "type": "string",
            "description": "Дата и время, на которые намечено событие, в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2024-12-31 15:10:05"
          },
          "initiator": {
            "$ref": "#/components/schemas/UserShortDto"
          },
          "paid": {
            "type": "boolean",
            "description": "Нужно ли оплачивать участие",
            "example": true
          },
          "title": {
            "type": "string",
            "description": "Заголовок",
            "example": "Знаменитое шоу 'Летающая кукуруза'"
          },
          "views": {
            "type": "integer",
            "description": "Количество просмотрев события",
            "format": "int64",
            "example": 999
          }
        },
        "description": "Краткая информация о событии"
      },
      "LocationDto": {
        "required": [
          "lat",
          "lon"
        ],
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "Широта",
            "format": "float",
            "example": 55.754167
          },
          "lon": {
            "type": "number",
            "description": "Долгота",
            "format": "float",
            "example": 37.62
          }
        },
        "description": "Широта и долгота места проведения события"
      },
      "NewCategoryDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Название категории",
            "example": "Концерты"
          }
        },
        "description": "Данные для добавления или изменения категории"
      },
      "NewCompilationDto": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "events": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список идентификаторов событий, входящих в подборку",
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "pinned": {
            "type": "boolean",
            "description": "Закреплена ли подборка на главной странице сайта",
            "example": false,
            "default": false
          },
          "title": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Заголовок подборки",
            "example": "Летние концерты"
          }
        },
        "description": "Данные для создания подборки событий"
      },
      "NewEventDto": {
        "required": [
          "annotation",
          "category",
          "description",
          "eventDate",
          "location",
          "title"
        ],
        "type": "object",
        "properties": {
          "annotation": {
            "maxLength": 2000,
            "minLength": 20,
            "type": "string",
            "description": "Краткое описание события",
            "example": "Сплав на байдарках похож на полет."
          },
          "category": {
            "type": "integer",
            "description": "id категории, к которой относится событие",
            "format": "int64",
            "example": 2
          },
          "description": {
            "maxLength": 7000,
            "minLength": 20,
            "type": "string",
            "description": "Полное описание события",
            "example": "Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления."
          },
          "eventDate": {
            "type": "string",
            "description": "Дата и время, на которые намечено событие в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2024-12-31 15:10:05"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "paid": {
            "type": "boolean",
            "description": "Нужно ли оплачивать участие в событии",
            "example": true,
            "default": false
          },
          "participantLimit": {
            "minimum": 0,
            "type": "integer",
            "description": "Ограничение на количество участников. Значение 0 означает отсутствие ограничения",
            "format": "int32",
            "example": 10,
            "default": 0
          },
          "requestModeration": {
            "type": "boolean",
            "description": "Нужна ли пре-модерация заявок на участие.",
            "example": false,
            "default": true
          },
          "title": {
            "maxLength": 120,
            "minLength": 3,
            "type": "string",
            "description": "Заголовок события",
            "example": "Сплав на байдарках"
          }
        },
        "description": "Данные для создания события"
      },
      "NewUserRequest": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 250,
            "minLength": 2,
            "type": "string",
            "description": "Имя",
            "example": "Иван Петров"
          },
          "email": {
            "maxLength": 254,
            "minLength": 6,
            "type": "string",
            "description": "Почтовый адрес",
            "example": "ivan.petrov@practicummail.ru"
          }
        },
        "description": "Данные для добавления нового пользователя"
      },
      "ParticipationRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор заявки",
            "format": "int64",
            "example": 3
          },
          "created": {
            "type": "string",
            "description": "Дата и время создания заявки",
            "example": "2024-02-12 18:00:59"
          },
          "event": {
            "type": "integer",
            "description": "Идентификатор события",
            "format": "int64",
            "example": 1
          },
          "requester": {
            "type": "integer",
            "description": "Идентификатор пользователя, отправившего заявку",
            "format": "int64",
            "example": 2
          },
          "status": {
            "type": "string",
            "description": "Статус заявки",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "REJECTED",
              "CANCELED"
            ]
          },
          "visibility": {
            "type": "string",
            "description": "Видимость заявки",
            "example": "FRIENDS",
            "enum": [
              "FRIENDS",
              "FOLLOWERS",
              "NONE"
            ]
          }
        },
        "description": "Заявка на участие в событии"
      },
      "UpdateCompilationRequest": {
        "type": "object",
        "properties": {
          "events": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список id событий подборки для полной замены текущего списка",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              5,
              6,
              7
            ]
          },
          "pinned": {
            "type": "boolean",
            "description": "Закреплена ли подборка на главной странице сайта",
            "example": true
          },
          "title": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Заголовок подборки",
            "example": "Необычные фотозоны"
          }
        },
        "description": "Данные для изменения подборки событий"
      },
      "UpdateEventAdminRequest": {
        "type": "object",
        "properties": {
          "annotation": {
            "maxLength": 2000,
            "minLength": 20,
            "type": "string",
            "description": "Новое краткое описание",
            "example": "Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса"
          },
          "category": {
            "minimum": 1,
            "type": "integer",
            "description": "Новая категория",
            "format": "int64",
            "example": 3
          },
          "description": {
            "maxLength": 7000,
            "minLength": 20,
            "type": "string",
            "description": "Новое описание",
            "example": "От английского SUP - Stand Up Paddle — \"стоя на доске с веслом\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге."
          },
          "eventDate": {
            "type": "string",
            "description": "Новые дата и время события в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2024-10-11 23:10:05"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "paid": {
            "type": "boolean",
            "description": "Новое значение флага о платности мероприятия",
            "example": true
          },
          "participantLimit": {
            "minimum": 0,
            "type": "integer",
            "description": "Новый лимит пользователей",
            "format": "int32",
            "example": 7
          },
          "requestModeration": {
            "type": "boolean",
            "description": "Нужна ли пре-модерация заявок на участие",
            "example": false
          },
          "title": {
            "maxLength": 120,
            "minLength": 3,
            "type": "string",
            "description": "Новый заголовок",
            "example": "Сап прогулки по рекам и каналам"
          },
          "stateAction": {
            "type": "string",
            "description": "Изменение состояния события",
            "enum": [
              "PUBLISH_EVENT",
              "REJECT_EVENT"
            ]
          }
        },
        "description": "Данные для изменения информации о событии админом"
      },
      "UpdateEventUserRequest": {
        "type": "object",
        "properties": {
          "annotation": {
            "maxLength": 2000,
            "minLength": 20,
            "type": "string",
            "description": "Новое краткое описание",
            "example": "Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса"
          },
          "category": {
            "minimum": 1,
            "type": "integer",
            "description": "Новая категория",
            "format": "int64",
            "example": 3
          },
          "description": {
            "maxLength": 7000,
            "minLength": 20,
            "type": "string",
            "description": "Новое описание",
            "example": "От английского SUP - Stand Up Paddle — \"стоя на доске с веслом\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге."
          },
          "eventDate": {
            "type": "string",
            "description": "Новые дата и время события в формате \"yyyy-MM-dd HH:mm:ss\"",
            "example": "2023-10-11 23:10:05"
          },
          "location": {
            "$ref": "#/components/schemas/LocationDto"
          },
          "paid": {
            "type": "boolean",
            "description": "Новое значение флага о платности мероприятия",
            "example": true
          },
          "participantLimit": {
            "minimum": 0,
            "type": "integer",
            "description": "Новый лимит пользователей",
            "format": "int32",
            "example": 7
          },
          "requestModeration": {
            "type": "boolean",
            "description": "Нужна ли пре-модерация заявок на участие",
            "example": false
          },
          "title": {
            "maxLength": 120,
            "minLength": 3,
            "type": "string",
            "description": "Новый заголовок",
            "example": "Сап прогулки по рекам и каналам"
          },
          "stateAction": {
            "type": "string",
            "description": "Изменение состояния события",
            "example": "CANCEL_REVIEW",
            "enum": [
              "SEND_TO_REVIEW",
              "CANCEL_REVIEW"
            ]
          }
        },
        "description": "Данные для изменения информации о событии пользователем"
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Имя",
            "example": "Петров Иван"
          },
          "email": {
            "type": "string",
            "description": "Почтовый адрес",
            "example": "petrov.i@practicummail.ru"
          }
        },
        "description": "Пользователь"
      },
      "UserShortDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 3
          },
          "name": {
            "type": "string",
            "description": "Имя",
            "example": "Фёдоров Матвей"
          }
        },
        "description": "Краткая информация о пользователе"
      }
    }
  }
}
